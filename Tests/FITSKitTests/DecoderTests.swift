
import XCTest
@testable import FITS
@testable import FITSKit

import Foundation
import CoreFoundation
import Accelerate

final class DecoderTests: XCTestCase {
    
    static var allTests = [
        ("testGrayscaleDecoder", testGrayscaleDecoder ),
        ("testRGBDecoder", testRGBDecoder ),
        ("testARGBDecoder", testARGBDecoder ),
        ("testRGBADecoder", testRGBADecoder ),
        ("testRGB2GrayDecoder", testRGB2GrayDecoder ),
    ]
        

    func testGrayscaleDecoder() {
        
        let raw : [UInt8] = [
            25,25,25,25,25,25,25,25,25,25,
            50,50,50,50,50,50,50,50,50,50,
            75,75,75,75,75,75,75,75,75,75,
            100,100,100,100,100,100,100,100,100,
            125,125,125,125,125,125,125,125,125,
            150,150,150,150,150,150,150,150,150,
            175,175,175,175,175,175,175,175,175,
            200,200,200,200,200,200,200,200,200,
            225,225,225,225,225,225,225,225,225,
            250,250,250,250,250,250,250,250,250,
        ].bigEndian
        
        let decoder = GrayscaleDecoder((), width: 10, height: 10, bscale: 1, bzero: 0, min: 0, max: 250)

        var out : [Float] = .init(repeating: 0, count: 100)
        
        raw.withUnsafeBufferPointer{ rawPtr in
            out.withUnsafeMutableBufferPointer{ ptr in
                decoder.decode(rawPtr, ptr)
            }
        }
        
        XCTAssertEqual(out[0], 0.1)
        XCTAssertEqual(out[10], 0.2)
        XCTAssertEqual(out[20], 0.3)
        XCTAssertEqual(out[30], 0.4)
        XCTAssertEqual(out[40], 0.5)
        XCTAssertEqual(out[50], 0.6)
        XCTAssertEqual(out[60], 0.7)
        XCTAssertEqual(out[70], 0.8)
        XCTAssertEqual(out[80], 0.9)
        XCTAssertEqual(out[90], 1.0)
    }
    
    func testRGBDecoder() {
        
        // 0% R 50% G, 100% B
        let raw : [Int16] = [
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767
        ].bigEndian
        
        let decoder = RGB_Decoder<RGB>((), width: 10, height: 10, bscale: 1, bzero: 0, min: -32768, max: 32767)
        
        var out : [Float] = .init(repeating: 0.1, count: 300)
        
        raw.withUnsafeBufferPointer{ rawPtr in
            out.withUnsafeMutableBufferPointer{ ptr in
                decoder.decode(rawPtr, ptr)
            }
        }

        XCTAssertEqual(out[0], 0)
        XCTAssertEqual(out[1], 0.5000076)
        XCTAssertEqual(out[2], 1)
        
        XCTAssertEqual(out[9], 0)
        XCTAssertEqual(out[10], 0.5000076)
        XCTAssertEqual(out[11], 1)
        
        XCTAssertEqual(out[18], 0)
        XCTAssertEqual(out[19], 0.5000076)
        XCTAssertEqual(out[20], 1)
    }
    
    func testARGBDecoder() {
        
        // 0% R 50% G, 100% B
        let raw : [Int16] = [
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767
        ].bigEndian
        
        let decoder = RGB_Decoder<ARGB>((), width: 10, height: 10, bscale: 1, bzero: 32768, min: -32768, max: 32767)
        
        var out : [Float] = .init(repeating: 0, count: 400)
        
        raw.withUnsafeBufferPointer{ rawPtr in
            out.withUnsafeMutableBufferPointer{ ptr in
                decoder.decode(rawPtr, ptr)
            }
        }
        
        print(out)
        
        XCTAssertEqual(out[0], 0)
        XCTAssertEqual(out[1], 0)
        XCTAssertEqual(out[2], 0.5000076)
        XCTAssertEqual(out[3], 1)
        
        XCTAssertEqual(out[16], 0)
        XCTAssertEqual(out[17], 0)
        XCTAssertEqual(out[18], 0.5000076)
        XCTAssertEqual(out[19], 1)
        
        XCTAssertEqual(out[36], 0)
        XCTAssertEqual(out[37], 0)
        XCTAssertEqual(out[38], 0.5000076)
        XCTAssertEqual(out[39], 1)
    }
    
    
    func testRGBADecoder() {
        
        // 0% R 50% G, 100% B
        let raw : [Int16] = [
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767
        ].bigEndian
        
        let decoder = RGB_Decoder<RGBA>((), width: 10, height: 10, bscale: 1, bzero: 32768, min: -32768, max: 32767)
        
        var out : [Float] = .init(repeating: 0, count: 400)
        
        raw.withUnsafeBufferPointer{ rawPtr in
            out.withUnsafeMutableBufferPointer{ ptr in
                decoder.decode(rawPtr, ptr)
            }
        }
        
        print(out)
        
        
        XCTAssertEqual(out[0], 0)
        XCTAssertEqual(out[1], 0.5000076)
        XCTAssertEqual(out[2], 1)
        XCTAssertEqual(out[3], 0)
        
        XCTAssertEqual(out[16], 0)
        XCTAssertEqual(out[17], 0.5000076)
        XCTAssertEqual(out[18], 1)
        XCTAssertEqual(out[19], 0)
        
        XCTAssertEqual(out[36], 0)
        XCTAssertEqual(out[37], 0.5000076)
        XCTAssertEqual(out[38], 1)
        XCTAssertEqual(out[39], 0)
        
    }
    
    
    func testRGB2GrayDecoder() {
        
        // 0% R 50% G, 100% B
        let raw : [Int16] = [
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
            32767,32767,32767,32767,32767,32767,32767,32767,32767,32767
        ].bigEndian
        
        let decoder = RGB_Decoder<Mono>((), width: 10, height: 10, bscale: 1, bzero: 0, min: -32768, max: 32767)
        
        var out : [Float] = .init(repeating: 0, count: 100)
        
        raw.withUnsafeBufferPointer{ rawPtr in
            out.withUnsafeMutableBufferPointer{ ptr in
                decoder.decode(rawPtr, ptr)
            }
        }
        
        print(out)
        
        var expectation : Float = (0.0 * 0.21126)
        expectation += (0.5000076 * 0.7152)
        expectation += (1.0 * 0.0722)
        
        XCTAssertEqual(out[0], expectation)
        XCTAssertEqual(out[1], expectation)
        XCTAssertEqual(out[2], expectation)
        XCTAssertEqual(out[3], expectation)
        
        XCTAssertEqual(out[16], expectation)
        XCTAssertEqual(out[17], expectation)
        XCTAssertEqual(out[18], expectation)
        XCTAssertEqual(out[19], expectation)
        
        XCTAssertEqual(out[36], expectation)
        XCTAssertEqual(out[37], expectation)
        XCTAssertEqual(out[38], expectation)
        XCTAssertEqual(out[39], expectation)
        
    }
    
    
}
